version: '3.9'

services:
  postgresql-db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-init:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  bootstrapper:
    build:
      context: ../Backend/
      dockerfile: Bootstrapper.Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Npqsql__ConnectionString=Host=postgresql-db;Port=5432;Username=user;Password=password;
      - Cors__Origin=*
    networks:
      - backend-network
      - proxy-network
    ports:
      - "5000:80"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    depends_on:
      postgresql-db:
        condition: service_healthy

  background-tasks:
    build:
      context: ../Backend/
      dockerfile: BackgroundTasks.Dockerfile
    environment:
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_ENVIRONMENT=Development
      - Npqsql__ConnectionString=Host=postgresql-db;Port=5432;Username=user;Password=password;
    networks:
      - backend-network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    depends_on:
      postgresql-db:
        condition: service_healthy

  caddy-angular-app:
    build:
      context: ../Frontend/frontend-spa-app
      dockerfile: Frontend.Dockerfile
      args:
        CONFIG: production
    environment:
      APP_BASE_URL: https://localhost
      APP_NAME: LOCAL APP
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - proxy-network

networks:
  proxy-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  postgres_data:
  caddy_data:
  caddy_config: